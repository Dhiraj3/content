from typing import List, Dict
import demistomock as demisto
from CommonServerPython import *

# disable insecure warnings
requests.packages.urllib3.disable_warnings()


class Client(BaseClient):

    def __init__(self, api_key, verify):
        """Implements class for the feed.

        Args:
            api_key: API Key.
            verify: boolean, if *false* feed HTTPS server certificate is verified. Default: *false*
        """
        super().__init__(base_url="https://panacea.threatgrid.com/api/v3/feeds/", verify=verify)
        self._api_key = api_key
        self._proxies = handle_proxy()

    def get_indicators(self, feed_name: str, time_stamp: str):
        """Retrieves all indicators from the feed.

        Args:
            :param feed_name: the feed name to fetch
            :param time_stamp: Optional - fetch feeds only from this day

        """
        suffix = f'{feed_name}{time_stamp}.json'
        return self._http_request('GET', suffix, params={"api_key": self._api_key})


def test_module(client: Client, feed_name: List[str], first_fetch_date: Optional[datetime], feed_tags: list = [],
                tlp_color: Optional[str] = None) -> str:
    """Goes through all the code of the fetch.
    Args:
        client: Client object with request
        feed_tags: feed tags.
        first_fetch_date: The date from which to start fetching feeds
        tlp_color: Traffic Light Protocol color.
        feed_name: the feed names to fetch
    Returns:
        str: ok.
    """
    fetch_indicators(client, feed_name, first_fetch_date, feed_tags, tlp_color, True)
    return 'ok'


def fetch_indicators(client: Client, feed_name: List[str], first_fetch_date: Optional[datetime], feed_tags: list = [],
                     tlp_color: Optional[str] = None, is_test: bool = False) -> List[Dict]:
    """Retrieves indicators from the feed

    Args:
        client: Client object with request
        feed_tags: feed tags.
        first_fetch_date: The date from which to start fetching feeds
        tlp_color: Traffic Light Protocol color.
        feed_name: the feed names to fetch
        is_test: Indicates whether it is a test or not

    Returns:
        List. Processed indicator from feed.
    """
    fetch_date = demisto.getIntegrationContext().get('last_fetch_date')
    if fetch_date:
        fetch_date = arg_to_datetime(fetch_date)
    else:
        fetch_date = first_fetch_date

    if fetch_date.date() >= fetch_date.now().date():
        fetch_date = fetch_date.now()
        fetch_time_stamp = ''
    else:
        fetch_time_stamp = f'_{str(fetch_date.date())}'
    indicators = []
    temp = {}
    if 'all' in feed_name:
        feed_name = ['autorun-registry', 'banking-dns', 'dga-dns', 'dll-hijacking-dns', 'doc-net-com-dns',
                     'downloaded-pe-dns', 'dynamic-dns', 'irc-dns', 'modified-hosts-dns', 'parked-dns',
                     'public-ip-check-dns', 'ransomware-dns', 'rat-dns', 'scheduled-tasks', 'sinkholed-ip-dns',
                     'stolen-cert-dns']
    for name in feed_name:
        result = client.get_indicators(feed_name=name, time_stamp=fetch_time_stamp)
        for obj in result:
            feed_related_indicators = [{'type': 'IP', 'value': ip} for ip in obj.get('ips')]
            feed_related_indicators.append({'type': 'File', 'value': obj.get('sample_md5')})
            feed_related_indicators.append({'type': 'File', 'value': obj.get('sample_sha256')})
            feed_related_indicators.append({'type': 'File', 'value': obj.get('sample_sha1')})

            if obj.get('domain') in temp:
                if name not in temp[obj.get('domain')]['fields']['Tags']:
                    temp[obj.get('domain')]['fields']['Tags'].append(name)

                temp[obj.get('domain')]['fields']['FeedRelatedIndicators'].extend(
                    related for related in feed_related_indicators
                    if related not in temp[obj.get('domain')]['fields']['FeedRelatedIndicators'])

            else:
                temp[obj.get('domain')] = {
                    "value": obj.get('domain'),
                    "type": 'Domain',
                    "rawJSON": obj,
                    "fields": {
                        "Tags": [name],
                        "reportedby": 'CiscoSMA',
                        "FeedRelatedIndicators": feed_related_indicators,
                        "Description": obj.get('description')
                    }
                }
            if tlp_color:
                temp[obj.get('domain')]['fields']['trafficlightprotocol'] = tlp_color
            if feed_tags:
                temp[obj.get('domain')]['fields']['trafficlightprotocol'] += feed_tags
    for key in temp:
        indicators.append(temp[key])
    next_fatch = (dateparser.parse('tomorrow', settings={'RELATIVE_BASE': fetch_date})).isoformat()
    if not is_test:
        demisto.setIntegrationContext({'last_fetch_date': next_fatch})
        demisto.debug(f'{len(indicators)} XSOAR Indicators were created.')
    return indicators


def get_indicators_command(client: Client, args: Dict[str, str]) -> CommandResults:
    """Wrapper for retrieving indicators from the feed to the war-room.

    Args:
        client: Client object with request
        args: demisto.args()

    Returns:
        Demisto Outputs.
    """
    indicators = []
    time_stamp = args.get('time_stamp', '')
    time_stamp = arg_to_datetime(arg=time_stamp, arg_name='time stamp')
    if time_stamp:
        time_stamp = str(time_stamp.date())
    feed_name = argToList(args.get('feed_name'))
    if 'all' in feed_name:
        feed_name = ['autorun-registry', 'banking-dns', 'dga-dns', 'dll-hijacking-dns', 'doc-net-com-dns',
                     'downloaded-pe-dns', 'dynamic-dns', 'irc-dns', 'modified-hosts-dns', 'parked-dns',
                     'public-ip-check-dns', 'ransomware-dns', 'rat-dns', 'scheduled-tasks', 'sinkholed-ip-dns',
                     'stolen-cert-dns']
    for name in feed_name:
        result = client.get_indicators(feed_name=name, time_stamp=time_stamp)
        for obj in result:
            feed_related_indicators = [{'type': 'IP', 'value': ip} for ip in obj.get('ips')]
            feed_related_indicators.append({'type': 'File', 'value': obj.get('sample_md5')})
            feed_related_indicators.append({'type': 'File', 'value': obj.get('sample_sha256')})
            feed_related_indicators.append({'type': 'File', 'value': obj.get('sample_sha1')})

            indicators.append({
                "value": obj.get('domain'),
                "type": 'Domain',
                "Tags": name,
                "FeedRelatedIndicators": feed_related_indicators,
                "Description": obj.get('description')
            })
    readable_output = tableToMarkdown('CiscoSMA Indicators:', t=indicators, headers=['value', 'type', 'Description',
                                                                                     'Tags', 'FeedRelatedIndicators'])
    command_results = CommandResults(
        outputs_prefix='CiscoSMA',
        outputs_key_field='',
        outputs=indicators,
        readable_output=readable_output,
        raw_response=indicators
    )
    return command_results


def main():
    """
    PARSE AND VALIDATE FEED PARAMS
    """
    params = demisto.params()
    args = demisto.args()
    api_key = params.get('api_key')
    verify = not params.get('insecure', False)
    feed_name = params.get('feed_name')
    feed_tags = argToList(params.get('feedTags'))
    tlp_color = params.get('tlp_color')
    first_fetch_date = params.get('first_fetch_date', 'today')
    if not first_fetch_date:
        first_fetch_date = 'today'
    first_fetch_date = arg_to_datetime(arg=first_fetch_date, arg_name='First fetch date')
    command = demisto.command()
    demisto.debug(f'Command being called is: {command}')

    try:
        client = Client(api_key, verify)

        if command == 'test-module':
            return_results(test_module(client, feed_name, first_fetch_date, feed_tags, tlp_color))

        elif command == 'fetch-indicators':
            indicators = fetch_indicators(client, feed_name, first_fetch_date, feed_tags, tlp_color)
            for iter_ in batch(indicators, batch_size=2000):
                demisto.createIndicators(iter_)

        elif command == 'CiscoSMA-get-indicators':
            return_results(get_indicators_command(client, args))
        else:
            raise NotImplementedError(f'Command "{command}" is not implemented.')

    except Exception as err:
        return_error(str(err))


if __name__ in ('__main__', '__builtin__', 'builtins'):
    main()
