id: QRadar v3 Full Search
version: -1
name: QRadar v3 Full Search
description: This playbook runs a QRadar query and returns its results to the context.
starttaskid: "0"
tasks:
  "0":
    id: "0"
    taskid: 7f567a1b-1caa-4e8f-8d64-6588d9b0efa5
    type: start
    task:
      id: 7f567a1b-1caa-4e8f-8d64-6588d9b0efa5
      version: -1
      name: ""
      iscommand: false
      brand: ""
      description: ''
    nexttasks:
      '#none#':
      - "1"
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 265,
          "y": 50
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "1":
    id: "1"
    taskid: 8950e4e9-abd6-49dd-868f-1b25858b5fe8
    type: regular
    task:
      id: 8950e4e9-abd6-49dd-868f-1b25858b5fe8
      version: -1
      name: Create QRadar Search
      description: Creates a new asynchronous Ariel search. Returns the search ID. Search
        status and results can be polled by sending the search ID to the 'qradar-search-status-get'
        and 'qradar-search-results-get' commands. Accepts SELECT query expressions
        only.
      script: '|||qradar-search-create'
      type: regular
      iscommand: true
      brand: ""
    nexttasks:
      '#none#':
      - "7"
    scriptarguments:
      query_expression:
        simple: ${inputs.query_expression}
      saved_search_id:
        simple: ${inputs.saved_search_id}
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 265,
          "y": 195
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "2":
    id: "2"
    taskid: 70ba0e2e-a80c-4046-8284-e1bf3de8287a
    type: playbook
    task:
      id: 70ba0e2e-a80c-4046-8284-e1bf3de8287a
      version: -1
      name: GenericPolling
      description: |-
        Use this playbook as a sub-playbook to block execution of the master playbook until a remote action is complete.
        This playbook implements polling by continuously running the command in Step \#2 until the operation completes.
        The remote action should have the following structure:

        1. Initiate the operation.
        2. Poll to check if the operation completed.
        3. (optional) Get the results of the operation.
      playbookName: GenericPolling
      type: playbook
      iscommand: false
      brand: ""
    nexttasks:
      '#none#':
      - "9"
    scriptarguments:
      AdditionalPollingCommandArgNames: {}
      AdditionalPollingCommandArgValues: {}
      Ids:
        simple: ${QRadar.Search.ID}
      Interval:
        simple: ${inputs.interval}
      PollingCommandArgName:
        simple: search_id
      PollingCommandName:
        simple: qradar-search-status-get
      Timeout:
        simple: ${inputs.timeout}
      dt:
        simple: QRadar.Search(val.Status!=='COMPLETED').ID
    separatecontext: true
    loop:
      iscommand: false
      exitCondition: ""
      wait: 1
      max: 100
    view: |-
      {
        "position": {
          "x": 60,
          "y": 720
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "3":
    id: "3"
    taskid: c15a37f1-8324-4655-8d96-8c8e68e3f0c6
    type: regular
    task:
      id: c15a37f1-8324-4655-8d96-8c8e68e3f0c6
      version: -1
      name: Get QRadar Search Results
      description: Retrieves search results.
      script: '|||qradar-search-results-get'
      type: regular
      iscommand: true
      brand: ""
    nexttasks:
      '#none#':
      - "5"
    scriptarguments:
      output_path:
        simple: ${inputs.output_path}
      range:
        simple: ${inputs.range}
      search_id:
        simple: ${QRadar.Search.ID}
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 480,
          "y": 1245
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "4":
    id: "4"
    taskid: 5f590290-8d38-4183-8485-ea4f5842ce5f
    type: condition
    task:
      id: 5f590290-8d38-4183-8485-ea4f5842ce5f
      version: -1
      name: Check If Search Was Completed
      description: Checks if the specified search has been completed before calling GenericPolling
        sub playbook.
      type: condition
      iscommand: false
      brand: ""
    nexttasks:
      '#default#':
      - "6"
      "yes":
      - "3"
    separatecontext: false
    conditions:
    - label: "yes"
      condition:
      - - operator: isEqualString
          left:
            value:
              simple: QRadar.Search.Status
            iscontext: true
          right:
            value:
              simple: COMPLETED
    view: |-
      {
        "position": {
          "x": 60,
          "y": 1070
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "5":
    id: "5"
    taskid: 503913e8-6918-478b-8116-483e9e7687bf
    type: title
    task:
      id: 503913e8-6918-478b-8116-483e9e7687bf
      version: -1
      name: Done
      type: title
      iscommand: false
      brand: ""
      description: ''
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 480,
          "y": 1420
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "6":
    id: "6"
    taskid: 80e8ecaf-af37-4b12-84b7-900be4486318
    type: regular
    task:
      id: 80e8ecaf-af37-4b12-84b7-900be4486318
      version: -1
      name: Print Error Message
      description: Prints an error entry with a specified message.
      scriptName: PrintErrorEntry
      type: regular
      iscommand: false
      brand: ""
    scriptarguments:
      message:
        simple: QRadar search was not completed.
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 50,
          "y": 1245
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "7":
    id: "7"
    taskid: 8187e1d4-3811-401c-8f5c-abb7d92654bb
    type: regular
    task:
      id: 8187e1d4-3811-401c-8f5c-abb7d92654bb
      version: -1
      name: QRadar Get Search Status
      description: Retrieves status information for a search, based on the search ID.
        parameter.
      script: '|||qradar-search-status-get'
      type: regular
      iscommand: true
      brand: ""
    nexttasks:
      '#none#':
      - "8"
    scriptarguments:
      search_id:
        simple: ${QRadar.Search.ID}
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 265,
          "y": 370
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "8":
    id: "8"
    taskid: cc77ab2e-2f07-421e-8a9e-2d4b8e93cee7
    type: condition
    task:
      id: cc77ab2e-2f07-421e-8a9e-2d4b8e93cee7
      version: -1
      name: 'Was Search Completed Immediately? '
      description: Checks if the QRadar search was completed immediately.
      type: condition
      iscommand: false
      brand: ""
    nexttasks:
      '#default#':
      - "2"
      "yes":
      - "3"
    separatecontext: false
    conditions:
    - label: "yes"
      condition:
      - - operator: isEqualString
          left:
            value:
              simple: QRadar.Search.Status
            iscontext: true
          right:
            value:
              simple: COMPLETED
    view: |-
      {
        "position": {
          "x": 265,
          "y": 545
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "9":
    id: "9"
    taskid: 79b1902f-c4c9-4f41-8c83-a850dacddcf0
    type: regular
    task:
      id: 79b1902f-c4c9-4f41-8c83-a850dacddcf0
      version: -1
      name: Check Search Status
      description: Retrieves status information for a search, based on the search ID.
        parameter.
      script: '|||qradar-search-status-get'
      type: regular
      iscommand: true
      brand: ""
    nexttasks:
      '#none#':
      - "4"
    scriptarguments:
      search_id:
        simple: ${QRadar.Search.ID}
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 60,
          "y": 895
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
view: |-
  {
    "linkLabelsPosition": {},
    "paper": {
      "dimensions": {
        "height": 1435,
        "width": 810,
        "x": 50,
        "y": 50
      }
    }
  }
inputs:
- key: query_expression
  value: {}
  required: false
  description: The AQL query to execute. Mutually exclusive with saved_search_id.
  playbookInputQuery:
- key: saved_search_id
  value: {}
  required: false
  description: Saved search ID to execute. Mutually exclusive with query_expression.
    Saved search ID is the 'id' field returned by the 'qradar-saved-searches-list' command.
  playbookInputQuery:
- key: range
  value: {}
  required: false
  description: 'Range of events to return. (e.g.: 0-20, 3-5, 3-3).'
  playbookInputQuery:
- key: output_path
  value: {}
  required: false
  description: Replaces the default context output path for the query result (QRadar.Search.Result).
    e.g., for output_path=QRadar.Correlations, the result will be under the 'QRadar.Correlations' key
    in the context data.
  playbookInputQuery:
- key: interval
  value:
    simple: "1"
  required: false
  description: Frequency in which the polling command will run (in minutes).
  playbookInputQuery:
- key: timeout
  value:
    simple: "10"
  required: false
  description: Number of times the polling command will run until declaring a
    timeout and resuming the playbook.
  playbookInputQuery:
outputs: []
tests:
- QRadar_v3-test
fromversion: 6.0.0
